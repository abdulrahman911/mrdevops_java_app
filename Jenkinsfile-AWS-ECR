@Library('my-shared-library') _

pipeline{
  agent any

  parameters{
    choice(name: 'action', choices: 'create\ndelete', description: 'Choose Create/Destroy ')
    string(name: 'aws_account_id', description: "name of the aws account id", defaultValue: '200955153941')
    string(name: 'region', description: "name of the aws region", defaultValue: 'ap-south-1')
    string(name: 'repo_name', description: "aws ecr repo name", defaultValue: 'myjava-app')
  }

    stages{   
        
        stage('Git checkout'){
        when { expression { params.action == 'create'} }
        steps{
                gitCheckout(
                branch: "main",
                url: "https://github.com/abdulrahman911/mrdevops_java_app.git"
              )            
            }
        }

        // stage('Unit Test Maven'){
        // when { expression { params.action == 'create'} }    
        //     steps{
        //         script{
        //             mvnTest()
        //         }
        //     }
        // }

        // stage('Integration Test maven'){
        // when { expression { params.action == 'create'} }  
        //     steps{
        //         script{
        //             mvnIntegrationTest()
        //         }
        //     }
        // }

        // stage('Static Code Analysis: Sonarqube '){
        //     when { expression { params.action == 'create' } }
        //     steps{
        //        script {
        //             def SonarqubeCredentialsId = 'sonarqube-api'
        //             staticCodeAnalysis(SonarqubeCredentialsId)
        //        }
                
        //     }
        // }

        // stage('Quality Gate Status Check: Sonarqube'){
        //     when { expression { params.action == 'create'} }
        //     steps{
        //         script {

        //             def SonarqubeCredentials = 'sonarqube-api'
        //             qualityGateStatus(SonarqubeCredentials)
        //         }
        //     }
        // }

        stage('Maven Build'){
            when { expression { params.action == 'create' } }
            steps{
                script{
                    mvnBuild()
                }

            }
        }

        stage("Docker Image Build : ECR"){
            when { expression { params.action == 'create'} }
            steps{
                script{

                    dockerBuild("${params.aws_account_id}", "${params.region}", "${params.repo_name}")
                }
            }
        }
        stage("Docker Image Scan: Trivy"){
            when { expression { params.action == 'create'} }
            steps{
                script{

                    dockerImageScan("${params.aws_account_id}", "${params.region}", "${params.repo_name}")
                }
            }
        }   
        stage("Docker Image Push: ECR"){
            when { expression { params.action == 'create'} }
            steps{
                script{

                    dockerImagePush("${params.aws_account_id}", "${params.region}", "${params.repo_name}")
                }
            }
        } 
        stage("Docker Image Clean: JenkinHost"){
            when { expression { params.action == 'create'} }
            steps{
                script{

                    dockerImageCleanup("${params.aws_account_id}", "${params.region}", "${params.repo_name}")
                }
            }
        }        

    }
}        